#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
import psutil
import schedule
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('telescan.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelescanBot:
    def __init__(self):
        self.config = self.load_config()
        self.last_alert_time = {}
        self.monitoring_task = None
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
    
    def get_system_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_used_gb = memory.used / (1024**3)
            memory_total_gb = memory.total / (1024**3)
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            disk_used_gb = disk.used / (1024**3)
            disk_total_gb = disk.total / (1024**3)
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try:
                with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
                    temp = float(f.read()) / 1000
            except:
                temp = None
            
            # –°–µ—Ç—å
            network = psutil.net_io_counters()
            
            return {
                'cpu_percent': cpu_percent,
                'cpu_count': cpu_count,
                'memory_percent': memory.percent,
                'memory_used_gb': memory_used_gb,
                'memory_total_gb': memory_total_gb,
                'disk_percent': disk.percent,
                'disk_used_gb': disk_used_gb,
                'disk_total_gb': disk_total_gb,
                'temperature': temp,
                'network_bytes_sent': network.bytes_sent,
                'network_bytes_recv': network.bytes_recv
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if update.effective_user.id not in self.config.get('admin_ids', []):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
            return
            
        keyboard = [
            [InlineKeyboardButton("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='system_info')],
            [InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data='temperature')],
            [InlineKeyboardButton("üíæ –ü–∞–º—è—Ç—å", callback_data='memory')],
            [InlineKeyboardButton("üíø –î–∏—Å–∫", callback_data='disk')],
            [InlineKeyboardButton("üåê –°–µ—Ç—å", callback_data='network')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data='settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üì± **Telescan Bot - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'system_info':
            await self.show_system_info(query)
        elif query.data == 'temperature':
            await self.show_temperature(query)
        elif query.data == 'memory':
            await self.show_memory_info(query)
        elif query.data == 'disk':
            await self.show_disk_info(query)
        elif query.data == 'network':
            await self.show_network_info(query)
        elif query.data == 'settings':
            await self.show_settings(query)
        elif query.data == 'back_to_main':
            await self.show_main_menu(query)
    
    async def show_system_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        info = self.get_system_info()
        
        if not info:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        status_emoji = "üü¢"
        if info['cpu_percent'] > self.config['monitoring']['cpu_threshold']:
            status_emoji = "üî¥"
        elif info['memory_percent'] > self.config['monitoring']['memory_threshold']:
            status_emoji = "üü°"
        
        system_text = f"""
{status_emoji} **–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**

üñ•Ô∏è **CPU:** {info['cpu_percent']:.1f}% ({info['cpu_count']} —è–¥–µ—Ä)
üíæ **RAM:** {info['memory_percent']:.1f}% ({info['memory_used_gb']:.1f}GB / {info['memory_total_gb']:.1f}GB)
üíø **–î–∏—Å–∫:** {info['disk_percent']:.1f}% ({info['disk_used_gb']:.1f}GB / {info['disk_total_gb']:.1f}GB)
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
        """
        
        if info['temperature']:
            system_text += f"\nüå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {info['temperature']:.1f}¬∞C"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            system_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_temperature(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        info = self.get_system_info()
        
        if info.get('temperature'):
            temp = info['temperature']
            status = "üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è" if temp < self.config['monitoring']['temperature_threshold'] else "üî¥ –í—ã—Å–æ–∫–∞—è"
            
            temp_text = f"""
üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã**

**–¢–µ–∫—É—â–∞—è:** {temp:.1f}¬∞C
**–°—Ç–∞—Ç—É—Å:** {status}
**–ü–æ—Ä–æ–≥:** {self.config['monitoring']['temperature_threshold']}¬∞C

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
            """
        else:
            temp_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            temp_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_memory_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"""
        info = self.get_system_info()
        
        memory_text = f"""
üíæ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏**

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {info['memory_percent']:.1f}%
**–û–±—ä–µ–º:** {info['memory_used_gb']:.1f}GB / {info['memory_total_gb']:.1f}GB
**–°–≤–æ–±–æ–¥–Ω–æ:** {info['memory_total_gb'] - info['memory_used_gb']:.1f}GB

**–°—Ç–∞—Ç—É—Å:** {'üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ' if info['memory_percent'] > self.config['monitoring']['memory_threshold'] else 'üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ'}

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            memory_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_disk_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ"""
        info = self.get_system_info()
        
        disk_text = f"""
üíø **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ**

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {info['disk_percent']:.1f}%
**–û–±—ä–µ–º:** {info['disk_used_gb']:.1f}GB / {info['disk_total_gb']:.1f}GB
**–°–≤–æ–±–æ–¥–Ω–æ:** {info['disk_total_gb'] - info['disk_used_gb']:.1f}GB

**–°—Ç–∞—Ç—É—Å:** {'üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ' if info['disk_percent'] > self.config['monitoring']['disk_threshold'] else 'üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ'}

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            disk_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_network_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏"""
        info = self.get_system_info()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MB
        sent_mb = info['network_bytes_sent'] / (1024**2)
        recv_mb = info['network_bytes_recv'] / (1024**2)
        
        network_text = f"""
üåê **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏**

**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {sent_mb:.1f}MB
**–ü–æ–ª—É—á–µ–Ω–æ:** {recv_mb:.1f}MB
**–í—Å–µ–≥–æ:** {sent_mb + recv_mb:.1f}MB

‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            network_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**

**–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:** {self.config['monitoring']['check_interval']} —Å–µ–∫
**–ü–æ—Ä–æ–≥ CPU:** {self.config['monitoring']['cpu_threshold']}%
**–ü–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏:** {self.config['monitoring']['memory_threshold']}%
**–ü–æ—Ä–æ–≥ –¥–∏—Å–∫–∞:** {self.config['monitoring']['disk_threshold']}%
**–ü–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:** {self.config['monitoring']['temperature_threshold']}¬∞C

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if self.config['alerts']['enable_notifications'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='system_info')],
            [InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data='temperature')],
            [InlineKeyboardButton("üíæ –ü–∞–º—è—Ç—å", callback_data='memory')],
            [InlineKeyboardButton("üíø –î–∏—Å–∫", callback_data='disk')],
            [InlineKeyboardButton("üåê –°–µ—Ç—å", callback_data='network')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data='settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì± **Telescan Bot - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelescanBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(bot.config['bot_token']).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Telescan Bot –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

if __name__ == '__main__':
    import sys

    try:
        asyncio.run(main())
    except RuntimeError as e:
        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (Termux/Cursor/–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã) ‚Äî –æ–±—Ö–æ–¥–∏–º
        if "event loop is already running" in str(e):
            print("–¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, fallback: –ø—Ä—è–º–æ–π await")
            coro = main()
            task = asyncio.ensure_future(coro)
            loop = asyncio.get_event_loop()
            loop.run_until_complete(task)
        else:
            raise e 