#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import sys
import os
import time
import psutil
import signal

def kill_python_processes():
    """–£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–∞–º–∏"""
    killed_count = 0
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Python –ø—Ä–æ—Ü–µ—Å—Å
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                cmdline = proc.info['cmdline']
                if cmdline and any('main.py' in arg for arg in cmdline):
                    print(f"üî™ –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å {proc.info['pid']}: {' '.join(cmdline)}")
                    try:
                        proc.kill()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º
                        killed_count += 1
                    except psutil.NoSuchProcess:
                        pass
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    return killed_count

def kill_telegram_bot_processes():
    """–£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–æ–≤"""
    bot_files = [
        "Telescan_bot/main.py",
        "MineServ_bot/main.py", 
        "Mather_bots/main.py"
    ]
    
    killed_count = 0
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = proc.info['cmdline']
            if cmdline:
                cmdline_str = ' '.join(cmdline)
                for bot_file in bot_files:
                    if bot_file in cmdline_str:
                        print(f"üî™ –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ {proc.info['pid']}: {cmdline_str}")
                        try:
                            proc.kill()
                            killed_count += 1
                        except psutil.NoSuchProcess:
                            pass
                        break
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    return killed_count

def clear_logs():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã"""
    log_files = [
        "Telescan_bot/telescan.log",
        "MineServ_bot/mineserv.log",
        "Mather_bots/manager.log"
    ]
    
    cleared_count = 0
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                with open(log_file, 'w', encoding='utf-8') as f:
                    f.write(f"# –õ–æ–≥ –æ—á–∏—â–µ–Ω {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                print(f"üßπ –û—á–∏—â–µ–Ω –ª–æ–≥: {log_file}")
                cleared_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {log_file}: {e}")
    
    return cleared_count

def wait_for_processes_to_die():
    """–ñ–¥–∞—Ç—å, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è"""
    print("‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    
    for _ in range(10):  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
        active_processes = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    cmdline = proc.info['cmdline']
                    if cmdline and any('main.py' in arg for arg in cmdline):
                        active_processes += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        if active_processes == 0:
            print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            return True
        
        print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {active_processes}")
        time.sleep(1)
    
    print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
    return False

def start_bot(bot_name, bot_path):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(bot_path):
            print(f"‚ùå –ü–∞–ø–∫–∞ {bot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ main.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        main_file = os.path.join(bot_path, 'main.py')
        if not os.path.exists(main_file):
            print(f"‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {bot_path}")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        if os.name == 'nt':  # Windows
            process = subprocess.Popen(
                [sys.executable, main_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_CONSOLE,
                cwd=bot_path  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            )
        else:  # Linux/Android
            process = subprocess.Popen(
                [sys.executable, main_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=bot_path  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            )
        
        print(f"‚úÖ {bot_name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {bot_name}: {e}")
        return None

def stop_bot(process, bot_name):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
    if process and process.poll() is None:
        try:
            process.terminate()
            process.wait(timeout=5)
            print(f"‚èπÔ∏è {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            process.kill()
            print(f"üî™ {bot_name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {bot_name}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –ß–∏—Å—Ç—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–æ–≤...")
    
    # 1. –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å main.py
    print("\nüî™ –®–∞–≥ 1: –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–æ–≤...")
    killed1 = kill_python_processes()
    killed2 = kill_telegram_bot_processes()
    total_killed = killed1 + killed2
    print(f"üî™ –£–±–∏—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {total_killed}")
    
    # 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("\n‚è≥ –®–∞–≥ 2: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    wait_for_processes_to_die()
    
    # 3. –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
    print("\nüßπ –®–∞–≥ 3: –û—á–∏—â–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª—ã...")
    cleared = clear_logs()
    print(f"üßπ –û—á–∏—â–µ–Ω–æ –ª–æ–≥–æ–≤: {cleared}")
    
    # 4. –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    print("\n‚è≥ –®–∞–≥ 4: –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
    time.sleep(3)
    
    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
    print("\nüöÄ –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    bots = [
        ("Telescan Bot", "Telescan_bot"),
        ("MineServ Bot", "MineServ_bot"),
        ("Manager Bot", "Mather_bots")
    ]
    
    processes = []
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        for bot_name, bot_path in bots:
            if os.path.exists(bot_path):
                process = start_bot(bot_name, bot_path)
                if process:
                    processes.append((process, bot_name))
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            else:
                print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {bot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print(f"\nüéâ –ó–∞–ø—É—â–µ–Ω–æ –±–æ—Ç–æ–≤: {len(processes)}")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while True:
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–∞–ª –ª–∏ –∫–∞–∫–æ–π-—Ç–æ –±–æ—Ç
            for process, bot_name in processes[:]:
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è {bot_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    processes.remove((process, bot_name))
    
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        for process, bot_name in processes:
            stop_bot(process, bot_name)
        
        print("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for process, bot_name in processes:
            stop_bot(process, bot_name)

if __name__ == '__main__':
    main() 