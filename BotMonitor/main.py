#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
import os
import psutil
import sys
import traceback
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å nest_asyncio –¥–ª—è Windows/IDE
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
ERROR_LOG = 'errors.txt'

def log_uncaught_exception(exc_type, exc_value, exc_traceback):
    with open(ERROR_LOG, 'a', encoding='utf-8') as f:
        f.write(f"\n{'='*40}\n")
        f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–¢–∏–ø: {exc_type.__name__}\n")
        f.write(f"–û—à–∏–±–∫–∞: {exc_value}\n")
        traceback.print_tb(exc_traceback, file=f)
        f.write(f"{'='*40}\n")

sys.excepthook = log_uncaught_exception

class BotMonitor:
    def __init__(self):
        self.config = self.load_config()
        self.status_message = None
        self.monitoring_task = None
        self.auto_update_enabled = self.config.get('monitoring', {}).get('auto_update', True)
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = {
                "bot_token": "8058368540:AAFzYy41vBayoIQG8RQ_DDGPSr1gbA690d8",
                "admin_ids": [824312416],
                "bots": {
                    "telescan": {
                        "name": "Telescan Bot",
                        "path": "../Telescan_bot/main.py",
                        "process_name": "python"
                    },
                    "mineserv": {
                        "name": "MineServ Bot", 
                        "path": "../MineServ_bot/main.py",
                        "process_name": "python"
                    },
                    "manager": {
                        "name": "Manager Bot",
                        "path": "../Mather_bots/main.py", 
                        "process_name": "python"
                    }
                },
                "monitoring": {
                    "update_interval": 30,  # —Å–µ–∫—É–Ω–¥—ã
                    "auto_update": True
                }
            }
            with open('config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            return config
    
    def get_bot_status(self, bot_id, bot_config):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ main.py
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    cmdline = proc.info['cmdline']
                    if cmdline and any('main.py' in arg for arg in cmdline):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω—ã–π –±–æ—Ç
                        if bot_config['path'] in ' '.join(cmdline):
                            if proc.poll() is None:
                                return "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç", proc.pid
                            else:
                                return "üî¥ –£–ø–∞–ª", None
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            
            return "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ {bot_id}: {e}")
            return "‚ùì –û—à–∏–±–∫–∞", None
    
    def get_system_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            return {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'memory_used_gb': memory.used / (1024**3),
                'memory_total_gb': memory.total / (1024**3),
                'disk_percent': disk.percent,
                'disk_used_gb': disk.used / (1024**3),
                'disk_total_gb': disk.total / (1024**3)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if update.effective_user.id not in self.config.get('admin_ids', []):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
            return
        
        await self.show_status(update.message)
    
    async def show_status(self, message_or_query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = self.get_system_info()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_text = "üìä **–ú–æ–Ω–∏—Ç–æ—Ä –±–æ—Ç–æ–≤**\n\n"
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
        status_text += "ü§ñ **–ë–æ—Ç—ã:**\n"
        total_bots = 0
        running_bots = 0
        
        for bot_id, bot_config in self.config.get('bots', {}).items():
            status, pid = self.get_bot_status(bot_id, bot_config)
            status_text += f"{status} **{bot_config['name']}**"
            if pid:
                status_text += f" (PID: {pid})"
            status_text += "\n"
            
            total_bots += 1
            if "–†–∞–±–æ—Ç–∞–µ—Ç" in status:
                running_bots += 1
        
        status_text += f"\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {running_bots}/{total_bots} –±–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç\n\n"
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if system_info:
            status_text += "üíª **–°–∏—Å—Ç–µ–º–∞:**\n"
            status_text += f"üñ•Ô∏è CPU: {system_info['cpu_percent']:.1f}%\n"
            status_text += f"üíæ RAM: {system_info['memory_percent']:.1f}% ({system_info['memory_used_gb']:.1f}GB / {system_info['memory_total_gb']:.1f}GB)\n"
            status_text += f"üíø –î–∏—Å–∫: {system_info['disk_percent']:.1f}% ({system_info['disk_used_gb']:.1f}GB / {system_info['disk_total_gb']:.1f}GB)\n"
        
        status_text += f"\n‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%H:%M:%S')}"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh')],
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data='toggle_auto')],
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–æ", callback_data='detailed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(message_or_query, 'edit_message_text'):
            await message_or_query.edit_message_text(
                status_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            self.status_message = await message_or_query.reply_text(
                status_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'refresh':
            await self.show_status(query)
        elif query.data == 'toggle_auto':
            await self.toggle_auto_update(query)
        elif query.data == 'detailed':
            await self.show_detailed_status(query)
    
    async def toggle_auto_update(self, query):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.auto_update_enabled = not self.auto_update_enabled
        
        if self.auto_update_enabled:
            await query.edit_message_text(
                "‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ! –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode='Markdown'
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if not self.monitoring_task or self.monitoring_task.done():
                self.monitoring_task = asyncio.create_task(self.auto_update_status())
        else:
            await query.edit_message_text(
                "‚ùå –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!",
                parse_mode='Markdown'
            )
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if self.monitoring_task and not self.monitoring_task.done():
                self.monitoring_task.cancel()
    
    async def show_detailed_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        detailed_text = "üìä **–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–∞—Ö
        for bot_id, bot_config in self.config.get('bots', {}).items():
            status, pid = self.get_bot_status(bot_id, bot_config)
            detailed_text += f"**{bot_config['name']}**\n"
            detailed_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            if pid:
                detailed_text += f"PID: {pid}\n"
            detailed_text += f"–ü—É—Ç—å: `{bot_config['path']}`\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        system_info = self.get_system_info()
        if system_info:
            detailed_text += "üíª **–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            detailed_text += f"CPU: {system_info['cpu_percent']:.1f}%\n"
            detailed_text += f"RAM: {system_info['memory_percent']:.1f}% ({system_info['memory_used_gb']:.1f}GB / {system_info['memory_total_gb']:.1f}GB)\n"
            detailed_text += f"–î–∏—Å–∫: {system_info['disk_percent']:.1f}% ({system_info['disk_used_gb']:.1f}GB / {system_info['disk_total_gb']:.1f}GB)\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='refresh')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            detailed_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def auto_update_status(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        interval = self.config.get('monitoring', {}).get('update_interval', 30)
        
        while self.auto_update_enabled:
            try:
                await asyncio.sleep(interval)
                if self.status_message and self.auto_update_enabled:
                    await self.show_status(self.status_message)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(5)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot_monitor = BotMonitor()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_monitor.config['bot_token']).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", bot_monitor.start_command))
        application.add_handler(CallbackQueryHandler(bot_monitor.button_handler))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if bot_monitor.auto_update_enabled:
            bot_monitor.monitoring_task = asyncio.create_task(bot_monitor.auto_update_status())
        
        logger.info("Bot Monitor –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        try:
            error_text = f"‚ùå **–û—à–∏–±–∫–∞ Bot Monitor:**\n{str(e)}"
            for admin_id in bot_monitor.config.get('admin_ids', []):
                try:
                    await application.bot.send_message(
                        chat_id=admin_id,
                        text=error_text,
                        parse_mode='Markdown'
                    )
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {send_error}")
        except Exception as notify_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_error}")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        traceback.print_exc()
        
        # Fallback –¥–ª—è Windows/IDE
        try:
            def run_bot():
                asyncio.run(main())
            
            import threading
            thread = threading.Thread(target=run_bot)
            thread.daemon = True
            thread.start()
            thread.join()
        except Exception as fallback_error:
            logger.error(f"Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}") 