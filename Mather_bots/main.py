#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
import subprocess
import psutil
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å nest_asyncio –¥–ª—è Windows/IDE
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('manager.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BotManager:
    def __init__(self):
        self.config = self.load_config()
        self.bot_processes = {}
        self.restart_attempts = {}
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if update.effective_user.id not in self.config.get('admin_ids', []):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
            return
            
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤", callback_data='status')],
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", callback_data='start_all')],
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö", callback_data='stop_all')],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", callback_data='restart_all')],
            [InlineKeyboardButton("üì± –°–∏—Å—Ç–µ–º–∞", callback_data='system')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ **–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'status':
            await self.show_status(query)
        elif query.data == 'start_all':
            await self.start_all_bots(query)
        elif query.data == 'stop_all':
            await self.stop_all_bots(query)
        elif query.data == 'restart_all':
            await self.restart_all_bots(query)
        elif query.data == 'system':
            await self.show_system_info(query)
        elif query.data.startswith('bot_'):
            await self.handle_bot_action(query)
    
    async def show_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        status_text = "üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤:**\n\n"
        
        for bot_id, bot_config in self.config.get('bots', {}).items():
            is_running = bot_id in self.bot_processes and self.bot_processes[bot_id].poll() is None
            status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            keyboard = []
            if is_running:
                keyboard.append(InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'bot_stop_{bot_id}'))
                keyboard.append(InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'bot_restart_{bot_id}'))
            else:
                keyboard.append(InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'bot_start_{bot_id}'))
            
            status_text += f"**{bot_config['name']}:** {status}\n"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        reply_markup = InlineKeyboardMarkup([keyboard])
        
        await query.edit_message_text(
            status_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_all_bots(self, query):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        started_count = 0
        for bot_id in self.config.get('bots', {}):
            if await self.start_bot(bot_id):
                started_count += 1
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –±–æ—Ç–æ–≤: {started_count}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
        )
    
    async def stop_all_bots(self, query):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        stopped_count = 0
        for bot_id in list(self.bot_processes.keys()):
            if await self.stop_bot(bot_id):
                stopped_count += 1
        
        await query.edit_message_text(
            f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –±–æ—Ç–æ–≤: {stopped_count}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
        )
    
    async def restart_all_bots(self, query):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        await self.stop_all_bots(query)
        await asyncio.sleep(2)
        await self.start_all_bots(query)
    
    async def show_system_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        system_info = f"""
üì± **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:**

üñ•Ô∏è **CPU:** {cpu_percent}%
üíæ **RAM:** {memory.percent}% ({memory.used // 1024 // 1024}MB / {memory.total // 1024 // 1024}MB)
üíø **–î–∏—Å–∫:** {disk.percent}% ({disk.used // 1024 // 1024 // 1024}GB / {disk.total // 1024 // 1024 // 1024}GB)
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
        """
        
        await query.edit_message_text(
            system_info,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]),
            parse_mode='Markdown'
        )
    
    async def handle_bot_action(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–æ—Ç–æ–º"""
        action, bot_id = query.data.split('_', 2)[1:]
        
        if action == 'start':
            success = await self.start_bot(bot_id)
            message = "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!" if success else "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
        elif action == 'stop':
            success = await self.stop_bot(bot_id)
            message = "‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" if success else "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"
        elif action == 'restart':
            success = await self.restart_bot(bot_id)
            message = "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!" if success else "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='status')]])
        )
    
    async def start_bot(self, bot_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            bot_config = self.config['bots'][bot_id]
            if bot_id in self.bot_processes and self.bot_processes[bot_id].poll() is None:
                logger.info(f"–ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            process = subprocess.Popen(
                ['python', bot_config['path']],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            self.bot_processes[bot_id] = process
            logger.info(f"–ë–æ—Ç {bot_id} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {e}")
            return False
    
    async def stop_bot(self, bot_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if bot_id in self.bot_processes:
                process = self.bot_processes[bot_id]
                if process.poll() is None:
                    process.terminate()
                    process.wait(timeout=5)
                del self.bot_processes[bot_id]
                logger.info(f"–ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
            return False
    
    async def restart_bot(self, bot_id):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        await self.stop_bot(bot_id)
        await asyncio.sleep(2)
        return await self.start_bot(bot_id)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = BotManager()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(manager.config['bot_token']).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", manager.start_command))
    application.add_handler(CallbackQueryHandler(manager.button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

if __name__ == '__main__':
    import sys

    try:
        asyncio.run(main())
    except RuntimeError as e:
        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (Termux/Cursor/–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã) ‚Äî –æ–±—Ö–æ–¥–∏–º
        if "event loop is already running" in str(e):
            print("–¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, fallback: –ø—Ä—è–º–æ–π await")
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nest_asyncio –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                import nest_asyncio
                nest_asyncio.apply()
                loop = asyncio.get_event_loop()
                loop.run_until_complete(main())
            except ImportError:
                # –ï—Å–ª–∏ nest_asyncio –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π fallback
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(main())
                except Exception as e2:
                    print(f"–û—à–∏–±–∫–∞ fallback: {e2}")
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def run_bot():
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        loop.run_until_complete(main())
                    
                    thread = threading.Thread(target=run_bot)
                    thread.start()
                    thread.join()
        else:
            raise e 