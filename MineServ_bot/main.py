#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
import os
import subprocess
import psutil
import sys
import traceback
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å nest_asyncio –¥–ª—è Windows/IDE
try:
    import nest_asyncio
    nest_asyncio.apply()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('mineserv.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

ERROR_LOG = 'errors.txt'

def log_uncaught_exception(exc_type, exc_value, exc_traceback):
    with open(ERROR_LOG, 'a', encoding='utf-8') as f:
        f.write(f"\n{'='*40}\n")
        f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–¢–∏–ø: {exc_type.__name__}\n")
        f.write(f"–û—à–∏–±–∫–∞: {exc_value}\n")
        traceback.print_tb(exc_traceback, file=f)
        f.write(f"{'='*40}\n")

sys.excepthook = log_uncaught_exception

class MineServBot:
    def __init__(self):
        self.config = self.load_config()
        self.server_process = None
        self.server_status = "stopped"  # stopped, starting, running, stopping
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = {
                "bot_token": "YOUR_BOT_TOKEN_HERE",
                "admin_ids": [824312416],
                "server": {
                    "jar_path": "server.jar",
                    "max_ram": "2G",
                    "min_ram": "1G",
                    "port": 25565,
                    "world_name": "world",
                    "auto_restart": True
                },
                "monitoring": {
                    "check_interval": 30,
                    "max_restart_attempts": 3
                }
            }
            with open('config.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            return config
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if update.effective_user.id not in self.config.get('admin_ids', []):
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É!")
            return
        
        await self.show_main_menu(update.message)
    
    async def show_main_menu(self, message_or_query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data='server_status')],
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data='start_server')],
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data='stop_server')],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data='restart_server')],
            [InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='monitoring')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "‚õèÔ∏è **MineServ Bot**\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º Minecraft"
        
        if hasattr(message_or_query, 'edit_message_text'):
            await message_or_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif hasattr(message_or_query, 'message'):
            await message_or_query.message.edit_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await message_or_query.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'server_status':
            await self.show_server_status(query)
        elif query.data == 'start_server':
            await self.start_server(query)
        elif query.data == 'stop_server':
            await self.stop_server(query)
        elif query.data == 'restart_server':
            await self.restart_server(query)
        elif query.data == 'monitoring':
            await self.show_monitoring(query)
        elif query.data == 'settings':
            await self.show_settings(query)
        elif query.data == 'back_to_main':
            await self.show_main_menu(query)
    
    async def show_server_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        status_emoji = {
            "stopped": "üî¥",
            "starting": "üü°", 
            "running": "üü¢",
            "stopping": "üü†"
        }
        
        status_text = f"""
üñ•Ô∏è **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ Minecraft**

{status_emoji.get(self.server_status, "‚ùì")} **–°—Ç–∞—Ç—É—Å:** {self.server_status.upper()}

"""
        
        if self.server_process and self.server_process.poll() is None:
            status_text += f"üÜî **PID:** {self.server_process.pid}\n"
            status_text += f"‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {self.get_uptime()}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            status_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_server(self, query):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        if self.server_status == "running":
            await query.edit_message_text(
                "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
            return
        
        self.server_status = "starting"
        await query.edit_message_text(
            "üü° –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä Minecraft...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–±–æ–ª–≤–∞–Ω–∫–∞)
        await asyncio.sleep(3)
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            # self.server_process = subprocess.Popen([...])
            self.server_status = "running"
            await query.edit_message_text(
                "‚úÖ –°–µ—Ä–≤–µ—Ä Minecraft –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
        except Exception as e:
            self.server_status = "stopped"
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
    
    async def stop_server(self, query):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        if self.server_status != "running":
            await query.edit_message_text(
                "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
            return
        
        self.server_status = "stopping"
        await query.edit_message_text(
            "üü† –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–±–æ–ª–≤–∞–Ω–∫–∞)
        await asyncio.sleep(2)
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            # if self.server_process:
            #     self.server_process.terminate()
            #     self.server_process.wait(timeout=10)
            self.server_status = "stopped"
            self.server_process = None
            await query.edit_message_text(
                "‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
        except Exception as e:
            self.server_status = "running"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]])
            )
    
    async def restart_server(self, query):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        await self.stop_server(query)
        await asyncio.sleep(2)
        await self.start_server(query)
    
    async def show_monitoring(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        monitoring_text = f"""
üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã**

üñ•Ô∏è **CPU:** {cpu_percent}%
üíæ **RAM:** {memory.percent}% ({memory.used // 1024 // 1024}MB / {memory.total // 1024 // 1024}MB)
üíø **–î–∏—Å–∫:** {disk.percent}% ({disk.used // 1024 // 1024 // 1024}GB / {disk.total // 1024 // 1024 // 1024}GB)
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üéÆ **–°–µ—Ä–≤–µ—Ä Minecraft:**
{self.get_server_info()}
        """
        
        await query.edit_message_text(
            monitoring_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]),
            parse_mode='Markdown'
        )
    
    async def show_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞**

üìÅ **JAR —Ñ–∞–π–ª:** {self.config['server']['jar_path']}
üíæ **RAM:** {self.config['server']['min_ram']} - {self.config['server']['max_ram']}
üåê **–ü–æ—Ä—Ç:** {self.config['server']['port']}
üó∫Ô∏è **–ú–∏—Ä:** {self.config['server']['world_name']}
üîÑ **–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:** {'‚úÖ' if self.config['server']['auto_restart'] else '‚ùå'}
        """
        
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]),
            parse_mode='Markdown'
        )
    
    def get_uptime(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.server_process:
            return "–ù–µ –∑–∞–ø—É—â–µ–Ω"
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        return "00:00:00"
    
    def get_server_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        if self.server_status == "running":
            return f"üü¢ –†–∞–±–æ—Ç–∞–µ—Ç (PID: {self.server_process.pid if self.server_process else 'N/A'})"
        elif self.server_status == "starting":
            return "üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        elif self.server_status == "stopping":
            return "üü† –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è..."
        else:
            return "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = MineServBot()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(bot.config['bot_token']).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", bot.start_command))
        application.add_handler(CallbackQueryHandler(bot.button_handler))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("MineServ Bot –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"–¢–æ–∫–µ–Ω: {bot.config['bot_token'][:10]}...")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        raise

if __name__ == '__main__':
    import sys

    try:
        asyncio.run(main())
    except RuntimeError as e:
        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (Termux/Cursor/–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã) ‚Äî –æ–±—Ö–æ–¥–∏–º
        if "event loop is already running" in str(e):
            print("–¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, fallback: –ø—Ä—è–º–æ–π await")
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nest_asyncio –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                import nest_asyncio
                nest_asyncio.apply()
                loop = asyncio.get_event_loop()
                loop.run_until_complete(main())
            except ImportError:
                # –ï—Å–ª–∏ nest_asyncio –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π fallback
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(main())
                except Exception as e2:
                    print(f"–û—à–∏–±–∫–∞ fallback: {e2}")
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def run_bot():
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        loop.run_until_complete(main())
                    
                    thread = threading.Thread(target=run_bot)
                    thread.start()
                    thread.join()
        else:
            raise e 