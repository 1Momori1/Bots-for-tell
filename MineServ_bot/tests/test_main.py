#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import unittest
import json
import os
import sys
import tempfile
from unittest.mock import Mock, patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ main
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class TestMineServBot(unittest.TestCase):
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.test_config = {
            "bot_token": "test_token",
            "admin_ids": [123456789],
            "server": {
                "jar_path": "server.jar",
                "max_ram": "2G",
                "min_ram": "1G",
                "port": 25565,
                "world_name": "world",
                "auto_restart": True,
                "server_properties": {
                    "gamemode": "survival",
                    "difficulty": "normal",
                    "max_players": 20
                }
            },
            "monitoring": {
                "check_interval": 30,
                "max_restart_attempts": 3,
                "cpu_threshold": 80,
                "memory_threshold": 85,
                "disk_threshold": 90
            },
            "backup": {
                "enabled": True,
                "interval_hours": 6,
                "keep_backups": 7,
                "backup_path": "./backups"
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞
        self.temp_config_file = tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json')
        json.dump(self.test_config, self.temp_config_file)
        self.temp_config_file.close()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(self.temp_config_file.name):
            os.unlink(self.temp_config_file.name)
    
    @patch('main.open')
    def test_load_config_success(self, mock_open):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        mock_open.return_value.__enter__.return_value.read.return_value = json.dumps(self.test_config)
        
        from main import MineServBot
        bot = MineServBot()
        
        self.assertEqual(bot.config['bot_token'], 'test_token')
        self.assertEqual(bot.config['admin_ids'], [123456789])
        self.assertEqual(bot.config['server']['port'], 25565)
        self.assertEqual(bot.config['server']['max_ram'], '2G')
    
    @patch('main.open')
    def test_load_config_file_not_found(self, mock_open):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥–∞"""
        mock_open.side_effect = FileNotFoundError()
        
        from main import MineServBot
        bot = MineServBot()
        
        # –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.assertIn('bot_token', bot.config)
        self.assertIn('server', bot.config)
        self.assertIn('monitoring', bot.config)
    
    def test_server_status_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        from main import MineServBot
        bot = MineServBot()
        bot.config = self.test_config
        
        self.assertEqual(bot.server_status, "stopped")
        self.assertIsNone(bot.server_process)
    
    def test_server_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        from main import MineServBot
        bot = MineServBot()
        bot.config = self.test_config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        server_config = bot.config['server']
        required_fields = ['jar_path', 'max_ram', 'min_ram', 'port', 'world_name']
        for field in required_fields:
            self.assertIn(field, server_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        self.assertIsInstance(server_config['port'], int)
        self.assertIsInstance(server_config['auto_restart'], bool)
        self.assertIsInstance(server_config['max_ram'], str)
    
    def test_monitoring_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        from main import MineServBot
        bot = MineServBot()
        bot.config = self.test_config
        
        monitoring_config = bot.config['monitoring']
        required_fields = ['check_interval', 'max_restart_attempts', 'cpu_threshold']
        for field in required_fields:
            self.assertIn(field, monitoring_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        self.assertIsInstance(monitoring_config['check_interval'], int)
        self.assertIsInstance(monitoring_config['cpu_threshold'], int)
    
    def test_backup_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ç–∫–∞–ø–æ–≤"""
        from main import MineServBot
        bot = MineServBot()
        bot.config = self.test_config
        
        backup_config = bot.config['backup']
        required_fields = ['enabled', 'interval_hours', 'keep_backups', 'backup_path']
        for field in required_fields:
            self.assertIn(field, backup_config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        self.assertIsInstance(backup_config['enabled'], bool)
        self.assertIsInstance(backup_config['interval_hours'], int)
        self.assertIsInstance(backup_config['keep_backups'], int)
    
    def test_admin_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        from main import MineServBot
        bot = MineServBot()
        bot.config = self.test_config
        
        # –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        self.assertTrue(123456789 in bot.config.get('admin_ids', []))
        
        # –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        self.assertFalse(999999999 in bot.config.get('admin_ids', []))
    
    def test_server_status_emoji_mapping(self):
        """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —ç–º–æ–¥–∑–∏"""
        from main import MineServBot
        bot = MineServBot()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        status_emoji = {
            "stopped": "üî¥",
            "starting": "üü°", 
            "running": "üü¢",
            "stopping": "üü†"
        }
        
        for status, expected_emoji in status_emoji.items():
            bot.server_status = status
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
    
    def test_config_structure_completeness(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from main import MineServBot
        bot = MineServBot()
        bot.config = self.test_config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        required_sections = ['bot_token', 'admin_ids', 'server', 'monitoring', 'backup']
        for section in required_sections:
            self.assertIn(section, bot.config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.assertIn('server_properties', bot.config['server'])
        self.assertIn('gamemode', bot.config['server']['server_properties'])

if __name__ == '__main__':
    unittest.main() 